Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]

Method 1 : 

Maintain a hashmap.

Traverse the elements in the array.Maintain all the elements in the map with their frequencies.
Create a array list and visit all the keys in the map if the value of the key is more than 1 add the element to the arraylist.

return the array list at the end.

Code :
public List<Integer> findDuplicates(int[] nums) {
    List<Integer> result = new ArrayList();
    Map<Integer,Integer> map = new ArrayList<>():
    for(int i=0;i<nums.length;i++){
        map.put(nums[i], map.getOrDefault(nums[i],0)+1);
    }
    for(Map.Entry<Integer,Integer> entry : map.entrySet()){
        if(entry.getValue() > 1)
            result.add(entry.getKey());
    }
    return result;
}

Time Complexity : O(n).
Space Complexity : O(n).

Method 2 :

As the range is [1,n].We can apply cyclic sort on these array elements so that the element 1 will be at the index 0 and element 2 will be at index 2.

Eg:
[4,3,2,7,8,2,3,1]
[1,2,2,3,3,4,7,8]

After sorting the array elements, iterate the elements one by one if the element-1 != current_index 
then it is the duplicate the element add it to the list.

return the list as the answer.

Code :
public List<Integer> findDuplicates(int[] nums) {
    List<Integer> result = new ArrayList();
    cycleSort(nums);
    for(int i=0;i<nums.length;i++){
        if(nums[i]-1!=i)result.add(nums[i]);
    }
    return result;
}
public void cycleSort(int arr[]){
    int i=0;
    while(i<arr.length){
        int correct = arr[i]-1;
        if(arr[i] != arr[correct]){
            swap(arr,i,correct);
        }
        else
            ++i;
    }
}
public void swap(int arr[],int i,int j){
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

Time Complexity : O(n).
Space Complexity : O(1).
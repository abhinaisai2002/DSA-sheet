Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

Method 1 :

The basic intuition is :
Steps required for 
Incrementing the smallest elements to bigger elements === Decrementing the bigger elements to smaller elements.

Find the smallest element in the array.The remaining elements in the array should be decremented so that the difference between the current element and the minimum element is the no.of steps took to make both the elements equal.This is calculated for all the elements and the no.of steps are added together,which gives the final result.


Code :
public int minMoves(int[] nums) {
    
    int min = Integer.MAX_VALUE;
    int sum = 0;
    
    for(int i=0;i<nums.length;i++){
        min = Math.min(min,nums[i]);
        sum += nums[i];
    }
    
    return sum - (nums.length*min);
}

Time Complexity : O(n).
Space Complexity : O(1).
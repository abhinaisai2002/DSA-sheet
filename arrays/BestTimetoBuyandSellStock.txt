You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Method 1 :

Maintain min and max.

Traverse the array elements one by one,while traversing the array maintain the minimum element for each iteration, and find the difference between the value with current index and minimum value.
If the difference is greater than max update the max.
This is done for all the iterations.

The max value is the answer.

Code :
public int maxProfit(int[] prices) {
    int mini = 0;
    int cost = 0;
    for(int i=1;i<prices.length;i++){
        if(prices[mini] > prices[i]){
            mini = i;
        }
        cost = Math.max(cost, prices[i] - prices[mini] );
    }
    return cost;
}

Time Complexity : O(n).
Space Complexity : O(1).
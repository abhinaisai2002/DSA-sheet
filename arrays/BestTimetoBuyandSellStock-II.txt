You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Method 1: (Using dynamic programming)

We are going to use a buy variable.
In the current recursion call 
If the buy variable is 1 we are going to buy it
If the buy variable is 0 we are going sell it.

We are going to start from index 0 
If the buy is 1 we are going buy it or not buy it
If the buy is 0 we are going sell it 

Code :
public static int f(int index,int[] values,int buy,int dp[][]){
    
    if(index == values.length)return 0;
    if(dp[index][buy]!=-1)return dp[index][buy];
    int profit = 0;
    if(buy==1){
        profit = Math.max (
            -1*values[index] + f(index+1,values,0,dp),
            f(index+1,values,1,dp)
        );
    }
    else{
        profit = Math.max(
            values[index] + f(index+1,values,1,dp),
            f(index+1,values,0,dp)
        );
    }
    return dp[index][buy] = profit;
} 

Time Complexity : O(n*2).
Space Complexity : O(n*2).

Method 2:

Initialize the profit with zero.
Iterate the loop from index 1 to end of the array.
At current index find the difference between the current index and previous index.
Add the difference to the profit.

Return the profit which is maximum.

Code :

public int maxProfit(int[] prices) {
    int profit=0;
    for(int i=1;i<prices.length;i++){
        if((prices[i] - prices[i-1]) > 0){
            profit = profit + prices[i] - prices[i-1];
        }
    }
    return profit;
                            
}

Time Complexity : O(n).
Space Complexity : O(1).
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.


Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

Method 1 :

count = 0

Maintain a nested loop,outer loop and inner loop.
Fix an element while element while iterating the array with the help of outer loop.(index = i)
With the help of inner loop iterate from index+1 to the end of the array.
In these loop from i to j, calculate the subarray sum.If sum is equal to k ++count

Total subarrays with sum k is in the answer count.
Return the count.

Code :
public int subarraySum(int[] nums, int k) {
    int count = 0;
    for(int i=0;i<nums.length;i++){
        int sum = 0;
        for(int j=i;j<nums.length;j++){
            sum = sum + nums[j];
            if(sum == k){
                ++count;
            }
        }
    }
    return count;
}

Time Complexity : O(n*n).
Space Complexity : O(1).

Method 2 :

Maintain hashMap, initially with {0:1}.

Iterate the array elements one by one.While iterating the elements calculate the sum upto the index i.
At a particular index if the current_sum - target in the hashMap that means a subarray with sum == targer i present in the array.
 
arr = [ , , , , , , , ],target == 5
sum = [ , ,4, , ,9, , ] 9-5 = 4 will be in hashmap.
From 4 if we add array elements sumups to 5 gives the current sum = 9.
We take the value of the difference in the map and add it to the count and increment the value of the key.

Finally return the count.

Code :

public int subarraySum(int[] nums, int k) {
    Map<Integer,Integer> map = new HashMap<>();
    map.put(0,1);
    int sum = 0;
    int count = 0;
    for(int i=0;i<nums.length;i++){
        sum = sum + nums[i];
        if(map.containsKey(sum-k)){
            count += map.get(sum-k);
        }
        map.put(sum,map.getOrDefault(sum,0)+1);
    }
    return count;
}

Time Complexity : O(n).
Space Complexity : O(n).
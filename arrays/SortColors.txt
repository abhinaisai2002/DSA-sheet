Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.
 
Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

Method 1 : 

Apply a sorting algorithm.(Quick or Merge)

Time Complexity : O(nlogn)
Space Complexity : O(1).

Method 2 : (Using a HashMap or 3 variables)

Traversing the given array one by one and maintaining the frequency of 0s 1s 2s in the map.
Replacing the values of array with 0s frequency and then 1s frequency and then 2s frequency gives the array in sorted fashion.

Time Complexity : O(n) for traversing the array.
Space Complexity : O(3) for using hashmap.

Method 3: (2 times traversal)

For the first traversal make sure that the all the zeroes in the array are in the starting of the array with the help of counter variable.

For the second traversal make sure that all the ones in the array are accumulated after the zeroes with the help of counter variable.

Automatically the 2s will be end of the array.

TimeComplexity : O(n+n) = O(n)
SpaceComplexity : O(1)

Code :

public int sortByPlaceholder(int arr[],int size,int placeholder){
    int last = arr.length-1;
    while(size<=last){
        if(arr[size] == placeholder){
            size++;
        }
        else if(arr[size]!=placeholder && arr[last] == placeholder){
            swap(arr,size++,last--);
        }
        else{
            last--;
        }
    }
    return size;

}

Method 4 :

Maintaining 3 pointer low (representing the end of zeroes),high(representing the start of twos),
mid(representing the ones)

Traverse from mid to high upto mid>high
1.If mid is 0 swap low++ with mid++
2.If mid is 2 swap mid with high--
3.If mid is 1 increment mid

Here we are pushing all the zeroes to the starting of the array and pushing all the twos in the ending of the array,so that all the ones all accumulated in the middle of zeroes and twos automatically.

Code :
public void sortColors(int[] nums) {
    int low = 0;
    int mid = 0;
    int high = nums.length-1;
    
    while(mid<=high){
        if(nums[mid] == 0){
            swap(nums,low++,mid++);
        }else if(nums[mid] == 1){
            mid++;
        }else{
            swap(nums,mid,high--);
        }
    }
}
public void swap(int arr[],int i,int j){
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

Time Complexity : O(n)
Space Complexity : O(1)